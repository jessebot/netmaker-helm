# Default values for the netmaker helm chart. This is a YAML file.

# -- number of netmaker server replicas to create
replicas: 1

image:
  # -- The image repo to pull Netmaker image from
  repository: gravitl/netmaker
  # -- Pull Policy for images
  pullPolicy: IfNotPresent
  # -- Override the image tag to pull
  # tag: ""

# -- override the name for netmaker objects
nameOverride: ""

# -- override the full name for netmaker objects
fullnameOverride: ""

# -- optional tolerations settings for netmaker
tolerations: {}

# -- optional affinity settings for netmaker
affinity: {}
# example affinity
# affinity:
#   podAntiAffinity:
#     requiredDuringSchedulingIgnoredDuringExecution:
#     - labelSelector:
#         matchExpressions:
#         - key: app
#           operator: In
#           values:
#           - {{ include "netmaker.fullname" . }}
#       topologyKey: "kubernetes.io/hostname"

serviceAccount:
  # -- Specifies whether a service account should be created
  create: true
  # -- Annotations to add to the service account
  annotations: {}
  # -- Name of SA to use. If not set and create is true, a name is generated using the fullname template
  name: ""

# -- pod annotations to add
podAnnotations: {}

# -- pod security contect to add
podSecurityContext: {}
# fsGroup: 2000

api:
  service:
    # -- type for netmaker server services
    type: ClusterIP
    # -- port for API service
    port: 8081
    # -- targetport for API service
    targetPort: 8081

  ingress:
    # -- attempts to configure ingress if true
    enabled: true
    # -- api (REST) route subdomain
    host: 'api.cluster.local'
    # -- api ingress className
    className: "nginx"
    # -- annotations for the netmaker API ingress object
    annotations: {}
    # -- ingress api tls list
    tls: []
    # tls:
    #   - secretName: netmaker-api-tls
    #     hosts:
    #       - api.mydomain.tld

ui:
  # -- how many UI replicas to create
  replicas: 1
  service:
    # -- type for netmaker server services
    type: ClusterIP
    # -- port for UI service
    port: 80
    # -- target port for UI service
    targetport: 80
  ingress:
    # -- attempts to configure ingress if true
    enabled: true
    # -- hostname for mqtt ingress
    host: "dashboard.cluster.local"
    # -- UI ingress className
    className: "nginx"
    # -- annotations for the netmaker UI ingress object
    annotations: {}
    # -- ingress tls list
    tls: []
    # tls:
    #   - secretName: netmaker-mqtt-tls
    #     hosts:
    #       - dashboard.mydomain.tld

mq:
  # -- how many MQTT replicas to create
  replicas: 1
  generateCert: false
  # -- optional tolerations settings for mqtt
  tolerations: {}
  # -- optional affinity settings for mqtt
  affinity: {}
  # nodeAffinity:
  #   requiredDuringSchedulingIgnoredDuringExecution:
  #     nodeSelectorTerms:
  #     - matchExpressions:
  #       - key: mqhost
  #         operator: In
  #         values:
  #         - "true"
  username: netmaker
  password: ''
  # -- name of an existing secret to use for mq password. If set, ignores mq.password
  existingSecret: ''
  # -- name of key in existing secret to grab password from. If set, ignores mq.password
  secretKey: ''
  persistence:
    # -- name of existing PVC claim to use. if set, storageClassName is ignored
    existingClaim: ""
    accessMode: "ReadWriteMany"
    storageClassName: ""
    storage: 128Mi
  service:
    # -- type for netmaker server services
    type: ClusterIP
    # -- port for MQTT service
    port: 443
    # -- Target port for MQTT service
    targetPort: 8883
  ingress:
    # -- attempts to configure ingress if true
    enabled: true
    # -- hostname for mqtt ingress
    host: "broker.cluster.local"
    className: "nginx"
    # -- annotations for the mqtt ingress object
    annotations: {}
    ## Redirect http to https
    # nginx.ingress.kubernetes.io/ssl-redirect: 'true'
    ## destination addr for route
    # nginx.ingress.kubernetes.io/rewrite-target: /
    # -- ingress tls list
    tls: []
    # tls:
    #   - secretName: netmaker-mqtt-tls
    #     hosts:
    #       - broker.mydomain.tld

dns:
  # -- whether or not to deploy coredns
  enabled: false
  persistence:
    # -- existingClaim, if not set, defaults to HELM.RELEASE.NAME-dns
    existingClaim: ''
    storage: 1Gi
    storageClassName: ""
    accessMode: ReadWriteOnce

setIpForwarding:
  enabled: true

wireguard:
  # -- whether or not to use WireGuard on server
  enabled: true
  service:
    annotations: {}
    type: NodePort
  # -- whether or not to use Kernel WG (should be false unless WireGuard is installed on hosts).
  kernel: false
  # -- max number of networks that Netmaker will support if running with WireGuard enabled
  networkLimit: 10

# https://github.com/bitnami/charts/tree/main/bitnami/postgresql#parameters
postgresql:
  # set to false if you want to use an existing postgres server.
  # if false, you must set the externalDatabase parameters
  enabled: true
  # postgresqlHostname: preexisting-postgresql
  # postgresqlPort: 5432
  auth:
    database: netmaker
    username: netmaker
    # you must set a password; the password generated by the postgresql chart will
    # be rotated on each upgrade:
    # https://github.com/bitnami/charts/tree/main/bitnami/postgresql#upgrade
    password: ""
    # Set the password for the "postgres" admin user
    # set this to the same value as above if you've previously installed
    # this chart and you're having problems getting mastodon to connect to the DB
    # postgresPassword: ""
    # you can also specify the name of an existing Secret
    # with a key of password set to the password you want
    existingSecret: ""
    secretKeys:
      userPasswordKey: ""
      adminPasswordKey: ""
    primary:
      persistence:
        enabled: true
        # existingClaim: ''

# if postgresql.enabled is false, these values are used instead
externalDatabase:
  # type of database, only postgreql supported in this helm chart at this time
  type: postgresql
  # -- postgres host
  host: external.postgres.url
  # -- postgres hosts port
  port: 5432
  # -- postgres username
  username: netmaker
  # -- postgres pass for netmaker user. ignored if existingSecret is set
  password: ""
  # -- postgress db
  database: netmaker
  # use existing secret for netmaker user's password
  existingSecret: ""
  secretKeys:
    passwordKey: ""

# OAuth section - untested
oauth:
  enabled: false
  # AUTH_PROVIDER: must be one of: azure-ad|github|google|oidc
  provider: "oidc"
  existingSecret: ""
  secretKeys:
    # CLIENT_ID - client id of your oauth provider
    clientID:
    # CLIENT_SECRET - client secret of your oauth provider
    clientSecret:
    # FRONTEND_URL - https://dashboard.<netmaker base domain> <-- untested
    frontendURL:
    # OIDC_ISSUER - https://oidc.yourprovider.com - URL of oidc provider
    issuer:
    # AZURE_TENANT - only for azure, you may optionally specify the tenant for the OAuth
    # azureTenant:
